# coding: utf-8

"""
    127.0.0.1:9000

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.4.3+2c41897
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchuniversalabsoluteApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_search_absolute_chunked(self, query, _from, to, fields, **kwargs):  # noqa: E501
        """Export message search with absolute timerange.  # noqa: E501

        Search for messages using an absolute timerange, specified as from/to with format yyyy-MM-ddTHH:mm:ss.SSSZ (e.g. 2014-01-23T15:34:49.000Z) or yyyy-MM-dd HH:mm:ss.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_search_absolute_chunked(query, _from, to, fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See description for date format (required)
        :param str to: Timerange end. See description for date format (required)
        :param str fields: Comma separated list of fields to return (required)
        :param int limit: Maximum number of messages to return.
        :param int offset: Offset
        :param str filter: Filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_search_absolute_chunked_with_http_info(query, _from, to, fields, **kwargs)  # noqa: E501
        else:
            (data) = self.export_search_absolute_chunked_with_http_info(query, _from, to, fields, **kwargs)  # noqa: E501
            return data

    def export_search_absolute_chunked_with_http_info(self, query, _from, to, fields, **kwargs):  # noqa: E501
        """Export message search with absolute timerange.  # noqa: E501

        Search for messages using an absolute timerange, specified as from/to with format yyyy-MM-ddTHH:mm:ss.SSSZ (e.g. 2014-01-23T15:34:49.000Z) or yyyy-MM-dd HH:mm:ss.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_search_absolute_chunked_with_http_info(query, _from, to, fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See description for date format (required)
        :param str to: Timerange end. See description for date format (required)
        :param str fields: Comma separated list of fields to return (required)
        :param int limit: Maximum number of messages to return.
        :param int offset: Offset
        :param str filter: Filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', '_from', 'to', 'fields', 'limit', 'offset', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_search_absolute_chunked" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `export_search_absolute_chunked`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `export_search_absolute_chunked`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `export_search_absolute_chunked`")  # noqa: E501
        # verify the required parameter 'fields' is set
        if ('fields' not in params or
                params['fields'] is None):
            raise ValueError("Missing the required parameter `fields` when calling `export_search_absolute_chunked`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def field_histogram_absolute(self, query, field, interval, _from, to, **kwargs):  # noqa: E501
        """Field value histogram of a query using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.field_histogram_absolute(query, field, interval, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str field: Field of whose values to get the histogram of (required)
        :param str interval: Histogram interval / bucket size. (year, quarter, month, week, day, hour or minute) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str filter: Filter
        :param bool cardinality: Calculate the cardinality of the field as well
        :return: HistogramResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.field_histogram_absolute_with_http_info(query, field, interval, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.field_histogram_absolute_with_http_info(query, field, interval, _from, to, **kwargs)  # noqa: E501
            return data

    def field_histogram_absolute_with_http_info(self, query, field, interval, _from, to, **kwargs):  # noqa: E501
        """Field value histogram of a query using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.field_histogram_absolute_with_http_info(query, field, interval, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str field: Field of whose values to get the histogram of (required)
        :param str interval: Histogram interval / bucket size. (year, quarter, month, week, day, hour or minute) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str filter: Filter
        :param bool cardinality: Calculate the cardinality of the field as well
        :return: HistogramResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'field', 'interval', '_from', 'to', 'filter', 'cardinality']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method field_histogram_absolute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `field_histogram_absolute`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `field_histogram_absolute`")  # noqa: E501
        # verify the required parameter 'interval' is set
        if ('interval' not in params or
                params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `field_histogram_absolute`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `field_histogram_absolute`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `field_histogram_absolute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'cardinality' in params:
            query_params.append(('cardinality', params['cardinality']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute/fieldhistogram', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HistogramResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def histogram_absolute(self, query, interval, _from, to, **kwargs):  # noqa: E501
        """Datetime histogram of a query using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.histogram_absolute(query, interval, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str interval: Histogram interval / bucket size. (year, quarter, month, week, day, hour or minute) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str filter: Filter
        :return: HistogramResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.histogram_absolute_with_http_info(query, interval, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.histogram_absolute_with_http_info(query, interval, _from, to, **kwargs)  # noqa: E501
            return data

    def histogram_absolute_with_http_info(self, query, interval, _from, to, **kwargs):  # noqa: E501
        """Datetime histogram of a query using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.histogram_absolute_with_http_info(query, interval, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str interval: Histogram interval / bucket size. (year, quarter, month, week, day, hour or minute) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str filter: Filter
        :return: HistogramResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'interval', '_from', 'to', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method histogram_absolute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `histogram_absolute`")  # noqa: E501
        # verify the required parameter 'interval' is set
        if ('interval' not in params or
                params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `histogram_absolute`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `histogram_absolute`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `histogram_absolute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute/histogram', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HistogramResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_absolute(self, query, _from, to, **kwargs):  # noqa: E501
        """Message search with absolute timerange.  # noqa: E501

        Search for messages using an absolute timerange, specified as from/to with format yyyy-MM-ddTHH:mm:ss.SSSZ (e.g. 2014-01-23T15:34:49.000Z) or yyyy-MM-dd HH:mm:ss.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_absolute(query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See description for date format (required)
        :param str to: Timerange end. See description for date format (required)
        :param int limit: Maximum number of messages to return.
        :param int offset: Offset
        :param str filter: Filter
        :param str fields: Comma separated list of fields to return
        :param str sort: Sorting (field:asc / field:desc)
        :param bool decorate: Run decorators on search result
        :return: SearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_absolute_with_http_info(query, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.search_absolute_with_http_info(query, _from, to, **kwargs)  # noqa: E501
            return data

    def search_absolute_with_http_info(self, query, _from, to, **kwargs):  # noqa: E501
        """Message search with absolute timerange.  # noqa: E501

        Search for messages using an absolute timerange, specified as from/to with format yyyy-MM-ddTHH:mm:ss.SSSZ (e.g. 2014-01-23T15:34:49.000Z) or yyyy-MM-dd HH:mm:ss.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_absolute_with_http_info(query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See description for date format (required)
        :param str to: Timerange end. See description for date format (required)
        :param int limit: Maximum number of messages to return.
        :param int offset: Offset
        :param str filter: Filter
        :param str fields: Comma separated list of fields to return
        :param str sort: Sorting (field:asc / field:desc)
        :param bool decorate: Run decorators on search result
        :return: SearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', '_from', 'to', 'limit', 'offset', 'filter', 'fields', 'sort', 'decorate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_absolute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_absolute`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `search_absolute`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `search_absolute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'decorate' in params:
            query_params.append(('decorate', params['decorate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stats_absolute(self, field, query, _from, to, **kwargs):  # noqa: E501
        """Field statistics for a query using an absolute timerange.  # noqa: E501

        Returns statistics like min/max or standard deviation of numeric fields over the whole query result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_absolute(field, query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field: Message field of numeric type to return statistics for (required)
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str filter: Filter
        :return: FieldStatsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stats_absolute_with_http_info(field, query, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.stats_absolute_with_http_info(field, query, _from, to, **kwargs)  # noqa: E501
            return data

    def stats_absolute_with_http_info(self, field, query, _from, to, **kwargs):  # noqa: E501
        """Field statistics for a query using an absolute timerange.  # noqa: E501

        Returns statistics like min/max or standard deviation of numeric fields over the whole query result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stats_absolute_with_http_info(field, query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field: Message field of numeric type to return statistics for (required)
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str filter: Filter
        :return: FieldStatsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'query', '_from', 'to', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stats_absolute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `stats_absolute`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `stats_absolute`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `stats_absolute`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `stats_absolute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldStatsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terms_absolute(self, field, query, _from, to, **kwargs):  # noqa: E501
        """Most common field terms of a query using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_absolute(field, query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field: Message field of to return terms of (required)
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str stacked_fields: Fields to stack
        :param int size: Maximum number of terms to return
        :param str filter: Filter
        :param str order: Sorting (field:asc / field:desc)
        :return: TermsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.terms_absolute_with_http_info(field, query, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.terms_absolute_with_http_info(field, query, _from, to, **kwargs)  # noqa: E501
            return data

    def terms_absolute_with_http_info(self, field, query, _from, to, **kwargs):  # noqa: E501
        """Most common field terms of a query using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_absolute_with_http_info(field, query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field: Message field of to return terms of (required)
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str stacked_fields: Fields to stack
        :param int size: Maximum number of terms to return
        :param str filter: Filter
        :param str order: Sorting (field:asc / field:desc)
        :return: TermsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'query', '_from', 'to', 'stacked_fields', 'size', 'filter', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terms_absolute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `terms_absolute`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `terms_absolute`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `terms_absolute`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `terms_absolute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'stacked_fields' in params:
            query_params.append(('stacked_fields', params['stacked_fields']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute/terms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TermsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terms_histogram_absolute(self, field, query, size, _from, to, interval, **kwargs):  # noqa: E501
        """Most common field terms of a query over time using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_histogram_absolute(field, query, size, _from, to, interval, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field: Message field of to return terms of (required)
        :param str query: Query (Lucene syntax) (required)
        :param int size: Maximum number of terms to return (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str interval: Histogram interval / bucket size. (year, quarter, month, week, day, hour or minute) (required)
        :param str stacked_fields: Fields to stack
        :param str filter: Filter
        :param str order: Sorting (field:asc / field:desc)
        :return: TermsHistogramResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.terms_histogram_absolute_with_http_info(field, query, size, _from, to, interval, **kwargs)  # noqa: E501
        else:
            (data) = self.terms_histogram_absolute_with_http_info(field, query, size, _from, to, interval, **kwargs)  # noqa: E501
            return data

    def terms_histogram_absolute_with_http_info(self, field, query, size, _from, to, interval, **kwargs):  # noqa: E501
        """Most common field terms of a query over time using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_histogram_absolute_with_http_info(field, query, size, _from, to, interval, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field: Message field of to return terms of (required)
        :param str query: Query (Lucene syntax) (required)
        :param int size: Maximum number of terms to return (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param str interval: Histogram interval / bucket size. (year, quarter, month, week, day, hour or minute) (required)
        :param str stacked_fields: Fields to stack
        :param str filter: Filter
        :param str order: Sorting (field:asc / field:desc)
        :return: TermsHistogramResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'query', 'size', '_from', 'to', 'interval', 'stacked_fields', 'filter', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terms_histogram_absolute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `terms_histogram_absolute`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `terms_histogram_absolute`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `terms_histogram_absolute`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `terms_histogram_absolute`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `terms_histogram_absolute`")  # noqa: E501
        # verify the required parameter 'interval' is set
        if ('interval' not in params or
                params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `terms_histogram_absolute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'stacked_fields' in params:
            query_params.append(('stacked_fields', params['stacked_fields']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute/terms-histogram', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TermsHistogramResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terms_stats_absolute(self, key_field, value_field, order, query, _from, to, **kwargs):  # noqa: E501
        """Ordered field terms of a query computed on another field using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_stats_absolute(key_field, value_field, order, query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_field: Message field of to return terms of (required)
        :param str value_field: Value field used for computation (required)
        :param str order: What to order on (Allowed values: TERM, REVERSE_TERM, COUNT, REVERSE_COUNT, TOTAL, REVERSE_TOTAL, MIN, REVERSE_MIN, MAX, REVERSE_MAX, MEAN, REVERSE_MEAN) (required)
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param int size: Maximum number of terms to return
        :param str filter: Filter
        :return: TermsStatsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.terms_stats_absolute_with_http_info(key_field, value_field, order, query, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.terms_stats_absolute_with_http_info(key_field, value_field, order, query, _from, to, **kwargs)  # noqa: E501
            return data

    def terms_stats_absolute_with_http_info(self, key_field, value_field, order, query, _from, to, **kwargs):  # noqa: E501
        """Ordered field terms of a query computed on another field using an absolute timerange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terms_stats_absolute_with_http_info(key_field, value_field, order, query, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_field: Message field of to return terms of (required)
        :param str value_field: Value field used for computation (required)
        :param str order: What to order on (Allowed values: TERM, REVERSE_TERM, COUNT, REVERSE_COUNT, TOTAL, REVERSE_TOTAL, MIN, REVERSE_MIN, MAX, REVERSE_MAX, MEAN, REVERSE_MEAN) (required)
        :param str query: Query (Lucene syntax) (required)
        :param str _from: Timerange start. See search method description for date format (required)
        :param str to: Timerange end. See search method description for date format (required)
        :param int size: Maximum number of terms to return
        :param str filter: Filter
        :return: TermsStatsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_field', 'value_field', 'order', 'query', '_from', 'to', 'size', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terms_stats_absolute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_field' is set
        if ('key_field' not in params or
                params['key_field'] is None):
            raise ValueError("Missing the required parameter `key_field` when calling `terms_stats_absolute`")  # noqa: E501
        # verify the required parameter 'value_field' is set
        if ('value_field' not in params or
                params['value_field'] is None):
            raise ValueError("Missing the required parameter `value_field` when calling `terms_stats_absolute`")  # noqa: E501
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `terms_stats_absolute`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `terms_stats_absolute`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `terms_stats_absolute`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `terms_stats_absolute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'key_field' in params:
            query_params.append(('key_field', params['key_field']))  # noqa: E501
        if 'value_field' in params:
            query_params.append(('value_field', params['value_field']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/universal/absolute/termsstats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TermsStatsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
