# coding: utf-8

"""
    127.0.0.1:9000

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.4.3+2c41897
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TermsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'built_query': 'str',
        'missing': 'int',
        'other': 'int',
        'terms': 'object',
        'terms_mapping': 'object',
        'time': 'int',
        'total': 'int'
    }

    attribute_map = {
        'built_query': 'built_query',
        'missing': 'missing',
        'other': 'other',
        'terms': 'terms',
        'terms_mapping': 'terms_mapping',
        'time': 'time',
        'total': 'total'
    }

    def __init__(self, built_query=None, missing=None, other=None, terms=None, terms_mapping=None, time=None, total=None):  # noqa: E501
        """TermsResult - a model defined in Swagger"""  # noqa: E501

        self._built_query = None
        self._missing = None
        self._other = None
        self._terms = None
        self._terms_mapping = None
        self._time = None
        self._total = None
        self.discriminator = None

        if built_query is not None:
            self.built_query = built_query
        if missing is not None:
            self.missing = missing
        if other is not None:
            self.other = other
        if terms is not None:
            self.terms = terms
        if terms_mapping is not None:
            self.terms_mapping = terms_mapping
        if time is not None:
            self.time = time
        if total is not None:
            self.total = total

    @property
    def built_query(self):
        """Gets the built_query of this TermsResult.  # noqa: E501


        :return: The built_query of this TermsResult.  # noqa: E501
        :rtype: str
        """
        return self._built_query

    @built_query.setter
    def built_query(self, built_query):
        """Sets the built_query of this TermsResult.


        :param built_query: The built_query of this TermsResult.  # noqa: E501
        :type: str
        """

        self._built_query = built_query

    @property
    def missing(self):
        """Gets the missing of this TermsResult.  # noqa: E501


        :return: The missing of this TermsResult.  # noqa: E501
        :rtype: int
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this TermsResult.


        :param missing: The missing of this TermsResult.  # noqa: E501
        :type: int
        """

        self._missing = missing

    @property
    def other(self):
        """Gets the other of this TermsResult.  # noqa: E501


        :return: The other of this TermsResult.  # noqa: E501
        :rtype: int
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this TermsResult.


        :param other: The other of this TermsResult.  # noqa: E501
        :type: int
        """

        self._other = other

    @property
    def terms(self):
        """Gets the terms of this TermsResult.  # noqa: E501


        :return: The terms of this TermsResult.  # noqa: E501
        :rtype: object
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this TermsResult.


        :param terms: The terms of this TermsResult.  # noqa: E501
        :type: object
        """

        self._terms = terms

    @property
    def terms_mapping(self):
        """Gets the terms_mapping of this TermsResult.  # noqa: E501


        :return: The terms_mapping of this TermsResult.  # noqa: E501
        :rtype: object
        """
        return self._terms_mapping

    @terms_mapping.setter
    def terms_mapping(self, terms_mapping):
        """Sets the terms_mapping of this TermsResult.


        :param terms_mapping: The terms_mapping of this TermsResult.  # noqa: E501
        :type: object
        """

        self._terms_mapping = terms_mapping

    @property
    def time(self):
        """Gets the time of this TermsResult.  # noqa: E501


        :return: The time of this TermsResult.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TermsResult.


        :param time: The time of this TermsResult.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def total(self):
        """Gets the total of this TermsResult.  # noqa: E501


        :return: The total of this TermsResult.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TermsResult.


        :param total: The total of this TermsResult.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TermsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
