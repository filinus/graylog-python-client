# coding: utf-8

"""
    127.0.0.1:9000

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.4.3+2c41897
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.search_response_decoration_stats1 import SearchResponseDecorationStats1  # noqa: F401,E501


class SearchResponseMessages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decoration_stats': 'SearchResponseDecorationStats1',
        'highlight_ranges': 'object',
        'index': 'str',
        'message': 'object'
    }

    attribute_map = {
        'decoration_stats': 'decoration_stats',
        'highlight_ranges': 'highlight_ranges',
        'index': 'index',
        'message': 'message'
    }

    def __init__(self, decoration_stats=None, highlight_ranges=None, index=None, message=None):  # noqa: E501
        """SearchResponseMessages - a model defined in Swagger"""  # noqa: E501

        self._decoration_stats = None
        self._highlight_ranges = None
        self._index = None
        self._message = None
        self.discriminator = None

        if decoration_stats is not None:
            self.decoration_stats = decoration_stats
        if highlight_ranges is not None:
            self.highlight_ranges = highlight_ranges
        if index is not None:
            self.index = index
        if message is not None:
            self.message = message

    @property
    def decoration_stats(self):
        """Gets the decoration_stats of this SearchResponseMessages.  # noqa: E501


        :return: The decoration_stats of this SearchResponseMessages.  # noqa: E501
        :rtype: SearchResponseDecorationStats1
        """
        return self._decoration_stats

    @decoration_stats.setter
    def decoration_stats(self, decoration_stats):
        """Sets the decoration_stats of this SearchResponseMessages.


        :param decoration_stats: The decoration_stats of this SearchResponseMessages.  # noqa: E501
        :type: SearchResponseDecorationStats1
        """

        self._decoration_stats = decoration_stats

    @property
    def highlight_ranges(self):
        """Gets the highlight_ranges of this SearchResponseMessages.  # noqa: E501


        :return: The highlight_ranges of this SearchResponseMessages.  # noqa: E501
        :rtype: object
        """
        return self._highlight_ranges

    @highlight_ranges.setter
    def highlight_ranges(self, highlight_ranges):
        """Sets the highlight_ranges of this SearchResponseMessages.


        :param highlight_ranges: The highlight_ranges of this SearchResponseMessages.  # noqa: E501
        :type: object
        """

        self._highlight_ranges = highlight_ranges

    @property
    def index(self):
        """Gets the index of this SearchResponseMessages.  # noqa: E501


        :return: The index of this SearchResponseMessages.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SearchResponseMessages.


        :param index: The index of this SearchResponseMessages.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def message(self):
        """Gets the message of this SearchResponseMessages.  # noqa: E501


        :return: The message of this SearchResponseMessages.  # noqa: E501
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SearchResponseMessages.


        :param message: The message of this SearchResponseMessages.  # noqa: E501
        :type: object
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResponseMessages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponseMessages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
