# coding: utf-8

"""
    127.0.0.1:9000

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.4.3+2c41897
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TermsStatsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'built_query': 'str',
        'terms': 'list[object]',
        'time': 'int'
    }

    attribute_map = {
        'built_query': 'built_query',
        'terms': 'terms',
        'time': 'time'
    }

    def __init__(self, built_query=None, terms=None, time=None):  # noqa: E501
        """TermsStatsResult - a model defined in Swagger"""  # noqa: E501

        self._built_query = None
        self._terms = None
        self._time = None
        self.discriminator = None

        if built_query is not None:
            self.built_query = built_query
        if terms is not None:
            self.terms = terms
        if time is not None:
            self.time = time

    @property
    def built_query(self):
        """Gets the built_query of this TermsStatsResult.  # noqa: E501


        :return: The built_query of this TermsStatsResult.  # noqa: E501
        :rtype: str
        """
        return self._built_query

    @built_query.setter
    def built_query(self, built_query):
        """Sets the built_query of this TermsStatsResult.


        :param built_query: The built_query of this TermsStatsResult.  # noqa: E501
        :type: str
        """

        self._built_query = built_query

    @property
    def terms(self):
        """Gets the terms of this TermsStatsResult.  # noqa: E501


        :return: The terms of this TermsStatsResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this TermsStatsResult.


        :param terms: The terms of this TermsStatsResult.  # noqa: E501
        :type: list[object]
        """

        self._terms = terms

    @property
    def time(self):
        """Gets the time of this TermsStatsResult.  # noqa: E501


        :return: The time of this TermsStatsResult.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TermsStatsResult.


        :param time: The time of this TermsStatsResult.  # noqa: E501
        :type: int
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TermsStatsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermsStatsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
