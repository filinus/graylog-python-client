# coding: utf-8

"""
    127.0.0.1:9000

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.4.3+2c41897
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.search_response_decoration_stats import SearchResponseDecorationStats  # noqa: F401,E501
from swagger_client.models.search_response_messages import SearchResponseMessages  # noqa: F401,E501
from swagger_client.models.search_response_used_indices import SearchResponseUsedIndices  # noqa: F401,E501


class SearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'built_query': 'str',
        'decoration_stats': 'SearchResponseDecorationStats',
        'fields': 'list[str]',
        '_from': 'datetime',
        'messages': 'list[SearchResponseMessages]',
        'query': 'str',
        'time': 'int',
        'to': 'datetime',
        'total_results': 'int',
        'used_indices': 'list[SearchResponseUsedIndices]'
    }

    attribute_map = {
        'built_query': 'built_query',
        'decoration_stats': 'decoration_stats',
        'fields': 'fields',
        '_from': 'from',
        'messages': 'messages',
        'query': 'query',
        'time': 'time',
        'to': 'to',
        'total_results': 'total_results',
        'used_indices': 'used_indices'
    }

    def __init__(self, built_query=None, decoration_stats=None, fields=None, _from=None, messages=None, query=None, time=None, to=None, total_results=None, used_indices=None):  # noqa: E501
        """SearchResponse - a model defined in Swagger"""  # noqa: E501

        self._built_query = None
        self._decoration_stats = None
        self._fields = None
        self.__from = None
        self._messages = None
        self._query = None
        self._time = None
        self._to = None
        self._total_results = None
        self._used_indices = None
        self.discriminator = None

        if built_query is not None:
            self.built_query = built_query
        if decoration_stats is not None:
            self.decoration_stats = decoration_stats
        if fields is not None:
            self.fields = fields
        if _from is not None:
            self._from = _from
        if messages is not None:
            self.messages = messages
        if query is not None:
            self.query = query
        if time is not None:
            self.time = time
        if to is not None:
            self.to = to
        if total_results is not None:
            self.total_results = total_results
        if used_indices is not None:
            self.used_indices = used_indices

    @property
    def built_query(self):
        """Gets the built_query of this SearchResponse.  # noqa: E501


        :return: The built_query of this SearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._built_query

    @built_query.setter
    def built_query(self, built_query):
        """Sets the built_query of this SearchResponse.


        :param built_query: The built_query of this SearchResponse.  # noqa: E501
        :type: str
        """

        self._built_query = built_query

    @property
    def decoration_stats(self):
        """Gets the decoration_stats of this SearchResponse.  # noqa: E501


        :return: The decoration_stats of this SearchResponse.  # noqa: E501
        :rtype: SearchResponseDecorationStats
        """
        return self._decoration_stats

    @decoration_stats.setter
    def decoration_stats(self, decoration_stats):
        """Sets the decoration_stats of this SearchResponse.


        :param decoration_stats: The decoration_stats of this SearchResponse.  # noqa: E501
        :type: SearchResponseDecorationStats
        """

        self._decoration_stats = decoration_stats

    @property
    def fields(self):
        """Gets the fields of this SearchResponse.  # noqa: E501


        :return: The fields of this SearchResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchResponse.


        :param fields: The fields of this SearchResponse.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def _from(self):
        """Gets the _from of this SearchResponse.  # noqa: E501


        :return: The _from of this SearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SearchResponse.


        :param _from: The _from of this SearchResponse.  # noqa: E501
        :type: datetime
        """

        self.__from = _from

    @property
    def messages(self):
        """Gets the messages of this SearchResponse.  # noqa: E501


        :return: The messages of this SearchResponse.  # noqa: E501
        :rtype: list[SearchResponseMessages]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this SearchResponse.


        :param messages: The messages of this SearchResponse.  # noqa: E501
        :type: list[SearchResponseMessages]
        """

        self._messages = messages

    @property
    def query(self):
        """Gets the query of this SearchResponse.  # noqa: E501


        :return: The query of this SearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchResponse.


        :param query: The query of this SearchResponse.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def time(self):
        """Gets the time of this SearchResponse.  # noqa: E501


        :return: The time of this SearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SearchResponse.


        :param time: The time of this SearchResponse.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def to(self):
        """Gets the to of this SearchResponse.  # noqa: E501


        :return: The to of this SearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SearchResponse.


        :param to: The to of this SearchResponse.  # noqa: E501
        :type: datetime
        """

        self._to = to

    @property
    def total_results(self):
        """Gets the total_results of this SearchResponse.  # noqa: E501


        :return: The total_results of this SearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this SearchResponse.


        :param total_results: The total_results of this SearchResponse.  # noqa: E501
        :type: int
        """

        self._total_results = total_results

    @property
    def used_indices(self):
        """Gets the used_indices of this SearchResponse.  # noqa: E501


        :return: The used_indices of this SearchResponse.  # noqa: E501
        :rtype: list[SearchResponseUsedIndices]
        """
        return self._used_indices

    @used_indices.setter
    def used_indices(self, used_indices):
        """Sets the used_indices of this SearchResponse.


        :param used_indices: The used_indices of this SearchResponse.  # noqa: E501
        :type: list[SearchResponseUsedIndices]
        """

        self._used_indices = used_indices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
